#ifndef __DS_NETFILTER_H__
#define __DS_NETFILTER_H__

#include <ctime> // for time_t
#include "doorsdefs.h"
//#include "tpreader.h" // for TP_CONNECTION_TYPE_TCPIP ...
//#include "tcpreader.h"
//#include "httpreader.h"
#include "ngdb.h"

class CDsNetworkFilter : public IDsNetworkFilter {
public:
    CDsNetworkFilter();
    explicit CDsNetworkFilter(DWORD dwFromTime);
    virtual ~CDsNetworkFilter();

    COracleReader* GetOracle() override {
        return m_pOracle;
    }

    int GetCacheCount() override {
        return m_nCacheCount;
    }

    void SetOracle(COracleReader* oracle) override {
        m_pOracle = oracle;
    }

    void SetCacheCount(int nCount) override {
        m_nCacheCount = nCount;
    }

    void SetLogTime(int nLogTime) override {
        m_nLogTime = nLogTime;
    }

    int GetLogTime() override {
        return m_nLogTime;
    }

    void SetInterval(DWORD interval) override;
    BOOL IsRealTime() override;
    DWORD GetToTime() override;
    DWORD GetFromTime() override;
    DWORD GetRealToTime() override;

    void SetRealToTime(DWORD dwTime) override;
    void SetToTime(DWORD dwTime) override;
    void SetFromTime(DWORD dwTime) override;
    void SetTimeRange(DWORD dwFromTime, DWORD dwToTime) override;
    BOOL CheckTimeAfter(DWORD dwTime) override;
    BOOL CheckTimeBefore(DWORD dwTime) override;
    BOOL CheckAddress(LPCSTR ip_address1, LPCSTR ip_address2) override;
    BOOL CheckPort(int port) override;
    BOOL CheckTime(DWORD dwTime) override;
    void ExcludeAddress(LPCSTR ip_address1, LPCSTR ip_address2) override;
    void ExcludeAddress(LPCSTR ip_address) override;
    void IncludeAddress(LPCSTR ip_address1, LPCSTR ip_address2) override;
    void IncludeAddress(LPCSTR ip_address) override;
    void ExcludePort(int port) override;
    void IncludePort(int port) override;

    void SetFilePath(LPCSTR file_path) override;
    LPCSTR GetFilePath() override;
    LPCSTR GetAddress() override {
        if (m_iInAddrToAnyCount == 0)
            return nullptr;
        return m_szIncludeAddrToAny[0];
    }

    WORD GetPort() override {
        return static_cast<WORD>(m_iIncludePort[0]);
    }

    void SetSrcToDst(LPCSTR pSrcIP, LPCSTR pDstIP) override {
        m_strSrcIP.CopyFrom(pSrcIP);
        m_strDstIP.CopyFrom(pDstIP);
    }

    LPCSTR GetSrcAddr() override {
        return m_strSrcIP.GetData();
    }

    LPCSTR GetDstAddr() override {
        return m_strDstIP.GetData();
    }

    BOOL CheckSrcAndDstAddr(LPCSTR lpSrcIPAddr, LPCSTR lpDstIPAddr) override {
        if (!lpSrcIPAddr || !lpDstIPAddr)
            return FALSE;

        if (m_strSrcIP.GetData() == nullptr && m_strDstIP.GetData() == nullptr)
            return TRUE;

        if (m_strSrcIP.GetData() == nullptr) {
            if ((strcmp(m_strDstIP.GetData(), lpDstIPAddr) == 0) ||
                (strcmp(m_strDstIP.GetData(), lpSrcIPAddr) == 0))
                return TRUE;
            return FALSE;
        }

        if (m_strDstIP.GetData() == nullptr) {
            if ((strcmp(m_strSrcIP.GetData(), lpSrcIPAddr) == 0) ||
                (strcmp(m_strSrcIP.GetData(), lpDstIPAddr) == 0))
                return TRUE;
            return FALSE;
        }

        if (strcmp(m_strSrcIP.GetData(), lpSrcIPAddr) == 0 && strcmp(m_strDstIP.GetData(), lpDstIPAddr) == 0)
            return TRUE;

        if (strcmp(m_strSrcIP.GetData(), lpDstIPAddr) == 0 && strcmp(m_strDstIP.GetData(), lpSrcIPAddr) == 0)
            return TRUE;

        return FALSE;
    }

protected:
    void Init();

    int m_nLogTime{0};
    DWORD m_dwFromTime{0};
    DWORD m_dwToTime{0};

    int m_iIncludePort[256]{};
    int m_iExcludePort[256]{};
    char m_szIncludeAddrToAny[256][15]{};
    char m_szExcludeAddrToAny[256][15]{};
    char m_szIncludeAddrToAddr[256][32]{};
    char m_szExcludeAddrToAddr[256][32]{};

    int m_iInPortCount{0};
    int m_iExPortCount{0};
    int m_iInAddrToAnyCount{0};
    int m_iExAddrToAnyCount{0};
    int m_iInAddrToAddrCount{0};
    int m_iExAddrToAddrCount{0};

    BOOL m_iLiveTime{FALSE};
    time_t m_dwRealToTime{0};
    DWORD m_dwInterval{0};

    ATString m_FilePath;
    WORD m_wHttpPort{0};

    ATString m_strSrcIP;
    ATString m_strDstIP;

private:
    COracleReader* m_pOracle{nullptr};
    int m_nCacheCount{0};
};

#endif // __DS_NETFILTER_H__