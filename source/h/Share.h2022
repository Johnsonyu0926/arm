#ifndef _SHARE_H__
#define _SHARE_H__

#include <cstdlib>
#include "doorsbase.h"

constexpr int GAP_INITIALIZER = 0;
constexpr int memfile_BUF_SIZE = 1024;
constexpr char GB_FLAG[] = "?GB2312?B?";
constexpr int CP_ACP = 0;
constexpr int CP_UTF7 = 65000;
constexpr int CP_UTF8 = 65001;

constexpr int MAX_ATTACH_COUNT = 1024; // 最大附件数量
constexpr char FIELD_CONTENT_TYPE[] = "CONTENT-TYPE:";
constexpr char FIELD_BOUNDARY[] = "BOUNDARY=";
constexpr char FIELD_FILE_NAME[] = "FILENAME=";
constexpr char FIELD_ENCODING_TYPE[] = "CONTENT-TRANSFER-ENCODING:";

constexpr char BOUNDARY_FLAG[] = "\r\n";

constexpr char MIME_STR_TEXT_PLAIN[] = "TEXT/PLAIN";
constexpr char MIME_STR_TEXT_RICHTEXT[] = "TEXT/RICHTEXT";
constexpr char MIME_STR_TEXT_HTML[] = "TEXT/HTML";

constexpr char MIME_STR_MULTIPART_MIXED[] = "MULTIPART/MIXED";
constexpr char MIME_STR_MULTIPART_PARALLEL[] = "MULTIPART/PARALLEL";
constexpr char MIME_STR_MULTIPART_DIGEST[] = "MULTIPART/DIGEST";
constexpr char MIME_STR_MULTIPART_ALTERNATIVE[] = "MULTIPART/ALTERNATIVE";
constexpr char MIME_STR_MULTIPART_REPORT[] = "MULTIPART/REPORT";
constexpr char MIME_STR_MESSAGE_RFC822[] = "MESSAGE/RFC822";
constexpr char MIME_STR_MESSAGE_PATIAL[] = "MESSAGE/PATIAL";
constexpr char MIME_STR_MESSAGE_EXTERNAL_BODY[] = "MESSAGE/EXTERNAL-BODY";

constexpr char MIME_STR_APPLICATION[] = "APPLICATION";
constexpr char MIME_STR_APPLICATION_OCT_STREAM[] = "APPLICATION/OCTET-STREAM";
constexpr char MIME_STR_APPLICATION_POSTSCRIPT[] = "APPLICATION/POSTSCRIPT";
constexpr char MIME_STR_APPLICATION_X_MSDOWNLOAD[] = "APPLICATION/X-MSDOWNLOAD";
constexpr char MIME_STR_APPLICATION_MSWORD[] = "APPLICATION/MSWORD";

constexpr char MIME_STR_IMAGE[] = "IMAGE";
constexpr char MIME_STR_IMAGE_JPEG[] = "IMAGE/JPEG";
constexpr char MIME_STR_IMAGE_GIF[] = "IMAGE/GIF";

constexpr int MIME_TEXT_PLAIN = 10;
constexpr int MIME_TEXT_RICHTEXT = 11;
constexpr int MIME_TEXT_HTML = 12;

constexpr int MIME_MULTIPART = 20;
constexpr int MIME_MULTIPART_MIXED = 21;
constexpr int MIME_MULTIPART_PARALLEL = 22;
constexpr int MIME_MULTIPART_DIGEST = 23;
constexpr int MIME_MULTIPART_ALTERNATIVE = 24;
constexpr int MIME_MULTIPART_REPORT = 25;

constexpr int MIME_MESSAGE_RFC822 = 30;
constexpr int MIME_MESSAGE_PATIAL = 31;
constexpr int MIME_MESSAGE_EXTERNAL_BODY = 32;

constexpr int MIME_APPLICATION = 40;
constexpr int MIME_APPLICATION_OCT_STREAM = 41;
constexpr int MIME_APPLICATION_POSTSCRIPT = 42;
constexpr int MIME_APPLICATION_X_MSDOWNLOAD = 43;
constexpr int MIME_APPLICATION_MSWORD = 44;

constexpr int MIME_IMAGE = 50;
constexpr int MIME_IMAGE_JPEG = 51;
constexpr int MIME_IMAGE_GIF = 52;

constexpr int MIME_FORMAT_UNKNOWN = -1;

constexpr int ENCODING_UNKNOWN = -1;
constexpr int ENCODING_BASE64 = 0;
constexpr int ENCODING_7BIT = 1;
constexpr int ENCODING_QP = 2;

enum class DsCharsetType {
    DsCharsetNone = 1,
    DsCharsetGB2312 = 2
};

enum class DsEncodingMethod {
    DsEncodingNone = 1,
    DsEncoding8BIT = 2,
    DsEncodingBase64 = 3,
    DsEncoding7BIT = 4,
    DsEncodingQP = 5
};

enum class DsContextType {
    DsContextNone = 1,
    DsContextTextPlain = 2,
    DsContextTextHtml = 3,
    DsContextAppOct = 4,
    DsContextAppMsWord = 5
};

enum class DsDisposition {
    DsDispNone = 1,
    DsDispAttachment = 2
};

enum class DsAuditStatus {
    DsAuditSucceeded = 1,
    DsAuditFailed = 2,
    DsAuditFailSubject = 3,
    DsAuditFailBody = 4,
    DsAuditFailAttachment = 5
};

struct BodyPart {
    DsEncodingMethod m_nEncoding; // 编码方式
    DsContextType m_nContentType; // 内容类型
    int nPart;
    int m_nBodyLen; // 数据长度（字节）
    char* m_pBody; // 数据
    int m_nDisp; // 处理方式，是否为附件
    char* m_pAttachFileName; // 附件文件名
    BodyPart* next;

    BodyPart()
        : m_nEncoding(DsEncodingMethod::DsEncodingNone),
          m_nContentType(DsContextType::DsContextNone),
          nPart(0),
          m_nBodyLen(0),
          m_pBody(nullptr),
          m_nDisp(0),
          m_pAttachFileName(nullptr),
          next(nullptr) {}
};

using Gap_BodyPart_t = BodyPart*;

#endif // _SHARE_H__